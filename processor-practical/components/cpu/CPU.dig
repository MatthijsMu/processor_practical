<?xml version="1.0" encoding="utf-8"?>
<circuit>
  <version>2</version>
  <attributes>
    <entry>
      <string>Description</string>
      <string>The Radboud University Nijmegen Central Processing Unit (RUNCPU), which is a basic 32-bit CPU for the Processors course, part of the Computing Science Bachelor.</string>
    </entry>
    <entry>
      <string>romContent</string>
      <romList>
        <roms/>
      </romList>
    </entry>
    <entry>
      <string>Width</string>
      <int>12</int>
    </entry>
  </attributes>
  <visualElements>
    <visualElement>
      <elementName>Clock</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>Clock</string>
        </entry>
      </elementAttributes>
      <pos x="-1800" y="2160"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Description</string>
          <string>The addressbus signal, which determines the address of a read or write operation. For a write operation the address is where a value being written by the CPU should be stored. For a read operation the address is where a value being read by the CPU should be read from.</string>
        </entry>
        <entry>
          <string>Label</string>
          <string>Addressbus</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="1260" y="1900"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Description</string>
          <string>The databus signal from the CPU. Any values written by the CPU will be stored here.</string>
        </entry>
        <entry>
          <string>Label</string>
          <string>Databus_out</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="700" y="2080"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Description</string>
          <string>Read enabled signal. When a read operation is performed by the CPU this value is set to high.</string>
        </entry>
        <entry>
          <string>Label</string>
          <string>RE</string>
        </entry>
      </elementAttributes>
      <pos x="-160" y="1480"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Description</string>
          <string>Write enabled signal. When a write operation is performed by the CPU this value is set to high.</string>
        </entry>
        <entry>
          <string>Label</string>
          <string>WE</string>
        </entry>
      </elementAttributes>
      <pos x="-220" y="1460"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Description</string>
          <string>Determines whether the CPU is in the halted state, in which it shall remain until the CPU is restarted.</string>
        </entry>
        <entry>
          <string>Label</string>
          <string>Halted</string>
        </entry>
      </elementAttributes>
      <pos x="-1280" y="1300"/>
    </visualElement>
    <visualElement>
      <elementName>ALU.dig</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>ALU</string>
        </entry>
      </elementAttributes>
      <pos x="860" y="1540"/>
    </visualElement>
    <visualElement>
      <elementName>FlagRegisterBank.dig</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>FlagRegisterBank</string>
        </entry>
      </elementAttributes>
      <pos x="1300" y="1680"/>
    </visualElement>
    <visualElement>
      <elementName>RegisterBank.dig</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>RegisterBank</string>
        </entry>
      </elementAttributes>
      <pos x="300" y="2060"/>
    </visualElement>
    <visualElement>
      <elementName>Tester.dig</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>Tester</string>
        </entry>
      </elementAttributes>
      <pos x="1580" y="1680"/>
    </visualElement>
    <visualElement>
      <elementName>Timer.dig</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>Timer</string>
        </entry>
      </elementAttributes>
      <pos x="-1540" y="1300"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Description</string>
          <string>The databus signal to the CPU. Any values read (or instructions fetched) by the CPU will be stored here.</string>
        </entry>
        <entry>
          <string>Label</string>
          <string>Databus_in</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="-1160" y="2160"/>
    </visualElement>
    <visualElement>
      <elementName>Testcase</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>add</string>
        </entry>
        <entry>
          <string>Testdata</string>
          <testData>
            <dataString>Clock Databus_in Halted RE WE Databus_out Addressbus R3
# The first line of test data must be the header, which contains the inputs and outputs used in the test case.
# It is possible to use registers in test cases by enabling their &apos;use as measurement value&apos; attribute in the advanced tab.
# The R0-R15 registers have this attribute enabled in the provided template.

# These init statements are used to set the register contents when the simulation is started.
# Note that all init statements are collected and executed first. Interleaving them with regular test data has no effect.
# If you wish to test other instructions, or with different values, you must add a new test case component to the circuit.
# If you do not do this, the tests will run sequentially, meaning the next test will use the CPU state obtained after executing the prior test.
# This is reflected below in the last test data row that checks if the program counter increased by 4.
init R1=4;
init R2=5;

# ADD R1, R2, R3
# The four test data lines below describe the testing of the ADD R1, R2, R3 instruction.
# We first load the machine code into the Databus_in, and then drive the clock to step through the full instruction cycle once.
# Note that the first two columns (in this case) are inputs, meaning they will be set to the provided value.
# The other columns are outputs, which are evaluated after the inputs have been set, and then compared against the given expected values.
# The value &apos;x&apos; denotes a &apos;do not care&apos; value. Please click the &apos;Help&apos; button in this dialog for more information regarding test cases.
0     0x6400123f 0      1  0  x           0          x
1     0x6400123f 0      x  x  x           x          x
0     0          0      0  0  x           x          x
1     0          0      0  0  x           x          9

# Fetch next instruction, check if the program counter increased by 4...
0     0          0      1  0  x           4          x</dataString>
          </testData>
        </entry>
      </elementAttributes>
      <pos x="-1680" y="1540"/>
    </visualElement>
    <visualElement>
      <elementName>Testcase</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>init</string>
        </entry>
        <entry>
          <string>Testdata</string>
          <testData>
            <dataString>Clock Databus_in Halted RE WE Databus_out Addressbus
0     0          0      1  0  x           0</dataString>
          </testData>
        </entry>
      </elementAttributes>
      <pos x="-1680" y="1460"/>
    </visualElement>
    <visualElement>
      <elementName>Multiplexer</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
        <entry>
          <string>flipSelPos</string>
          <boolean>true</boolean>
        </entry>
      </elementAttributes>
      <pos x="680" y="1700"/>
    </visualElement>
    <visualElement>
      <elementName>Multiplexer</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="180" y="1960"/>
    </visualElement>
    <visualElement>
      <elementName>Multiplexer</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
        <entry>
          <string>flipSelPos</string>
          <boolean>true</boolean>
        </entry>
      </elementAttributes>
      <pos x="40" y="1940"/>
    </visualElement>
    <visualElement>
      <elementName>Multiplexer</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
        <entry>
          <string>flipSelPos</string>
          <boolean>true</boolean>
        </entry>
      </elementAttributes>
      <pos x="1200" y="1880"/>
    </visualElement>
    <visualElement>
      <elementName>And</elementName>
      <elementAttributes>
        <entry>
          <string>wideShape</string>
          <boolean>true</boolean>
        </entry>
        <entry>
          <string>inverterConfig</string>
          <inverterConfig>
            <string>In_2</string>
          </inverterConfig>
        </entry>
      </elementAttributes>
      <pos x="-900" y="1900"/>
    </visualElement>
    <visualElement>
      <elementName>InstructionDecoder.dig</elementName>
      <elementAttributes/>
      <pos x="-1000" y="1300"/>
    </visualElement>
    <visualElement>
      <elementName>Testcase</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>add and write</string>
        </entry>
        <entry>
          <string>Testdata</string>
          <testData>
            <dataString>Clock Databus_in Halted RE WE Databus_out Addressbus R3
# The first line of test data must be the header, which contains the inputs and outputs used in the test case.
# It is possible to use registers in test cases by enabling their &apos;use as measurement value&apos; attribute in the advanced tab.
# The R0-R15 registers have this attribute enabled in the provided template.

# These init statements are used to set the register contents when the simulation is started.
# Note that all init statements are collected and executed first. Interleaving them with regular test data has no effect.
# If you wish to test other instructions, or with different values, you must add a new test case component to the circuit.
# If you do not do this, the tests will run sequentially, meaning the next test will use the CPU state obtained after executing the prior test.
# This is reflected below in the last test data row that checks if the program counter increased by 4.
init R1=4;
init R2=5;

# ADD R1, R2, R3
# The four test data lines below describe the testing of the ADD R1, R2, R3 instruction.
# We first load the machine code into the Databus_in, and then drive the clock to step through the full instruction cycle once.
# Note that the first two columns (in this case) are inputs, meaning they will be set to the provided value.
# The other columns are outputs, which are evaluated after the inputs have been set, and then compared against the given expected values.
# The value &apos;x&apos; denotes a &apos;do not care&apos; value. Please click the &apos;Help&apos; button in this dialog for more information regarding test cases.
0     0x6400123f 0      1  0  x           0          x
1     0x6400123f 0      x  x  x           x          x
0     0          0      0  0  x           x          x
1     0          0      0  0  x           x          9

# Fetch next instruction, check if the program counter increased by 4...
0     0          0      1  0  x           4          x

# WRITE R3, [R0 + 216]
0     0xe0d8300f 0      1  0  x           4          x
1     0xe0d8300f 0      x  x  x           x          x
0     0          0      0  1  9           0xd8       x
1     0          0      0  0  x           x          x

# Fetch next instruction, check if the program counter increased by 4...
0     0          0      1  0  x           8          x</dataString>
          </testData>
        </entry>
      </elementAttributes>
      <pos x="-1680" y="1620"/>
    </visualElement>
    <visualElement>
      <elementName>Testcase</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>write</string>
        </entry>
        <entry>
          <string>Testdata</string>
          <testData>
            <dataString>Clock Databus_in Halted RE WE Databus_out Addressbus R3
# The first line of test data must be the header, which contains the inputs and outputs used in the test case.
# It is possible to use registers in test cases by enabling their &apos;use as measurement value&apos; attribute in the advanced tab.
# The R0-R15 registers have this attribute enabled in the provided template.

# These init statements are used to set the register contents when the simulation is started.
# Note that all init statements are collected and executed first. Interleaving them with regular test data has no effect.
# If you wish to test other instructions, or with different values, you must add a new test case component to the circuit.
# If you do not do this, the tests will run sequentially, meaning the next test will use the CPU state obtained after executing the prior test.
# This is reflected below in the last test data row that checks if the program counter increased by 4.
init R3=9;

# WRITE R3, [R0 + 216]
0     0xe0d8300f 0      1  0  x           0          x
1     0xe0d8300f 0      x  x  x           x          x
0     0          0      0  1  9           0xd8       x
1     0          0      0  0  x           x          x

# Fetch next instruction, check if the program counter increased by 4...
0     0          0      1  0  x           4          x</dataString>
          </testData>
        </entry>
      </elementAttributes>
      <pos x="-1680" y="1700"/>
    </visualElement>
    <visualElement>
      <elementName>Testcase</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>write and read</string>
        </entry>
        <entry>
          <string>Testdata</string>
          <testData>
            <dataString>Clock Databus_in Halted RE WE Databus_out Addressbus R3
# The first line of test data must be the header, which contains the inputs and outputs used in the test case.
# It is possible to use registers in test cases by enabling their &apos;use as measurement value&apos; attribute in the advanced tab.
# The R0-R15 registers have this attribute enabled in the provided template.

# These init statements are used to set the register contents when the simulation is started.
# Note that all init statements are collected and executed first. Interleaving them with regular test data has no effect.
# If you wish to test other instructions, or with different values, you must add a new test case component to the circuit.
# If you do not do this, the tests will run sequentially, meaning the next test will use the CPU state obtained after executing the prior test.
# This is reflected below in the last test data row that checks if the program counter increased by 4.
init R4=9;

# WRITE R4, [R0 + 216]
0     0xe0d8400f 0      1  0  x           0          x
1     0xe0d8400f 0      x  x  x           x          x
0     0          0      0  1  9           0xd8       x
1     0          0      0  0  x           x          x

# Fetch next instruction, check if the program counter increased by 4...
0     0          0      1  0  x           4          x

# READ [R0 + 216], R3
0     0xc0d8003f 0      1  0  x           4          x
1     0xc0d8003f 0      x  x  x           x          x
0     9          0      1  0  x           0xd8       x
1     0          0      0  0  x           x          9

0     0          0      1  0  x           8          9</dataString>
          </testData>
        </entry>
      </elementAttributes>
      <pos x="-1680" y="1820"/>
    </visualElement>
    <visualElement>
      <elementName>Testcase</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>loadhi</string>
        </entry>
        <entry>
          <string>Testdata</string>
          <testData>
            <dataString>Clock Databus_in Halted RE WE Databus_out Addressbus R2
# The first line of test data must be the header, which contains the inputs and outputs used in the test case.
# It is possible to use registers in test cases by enabling their &apos;use as measurement value&apos; attribute in the advanced tab.
# The R0-R15 registers have this attribute enabled in the provided template.

# These init statements are used to set the register contents when the simulation is started.
# Note that all init statements are collected and executed first. Interleaving them with regular test data has no effect.
# If you wish to test other instructions, or with different values, you must add a new test case component to the circuit.
# If you do not do this, the tests will run sequentially, meaning the next test will use the CPU state obtained after executing the prior test.
# This is reflected below in the last test data row that checks if the program counter increased by 4.
init R1=4;
init R2=5;

# LOADHI 1, R2
# Machine code: 0x8000 012f
# The four test data lines below describe the testing of the LOADHI 1, R2 instruction.
# We first load the machine code into the Databus_in, and then drive the clock to step through the full instruction cycle once.
# Note that the first two columns (in this case) are inputs, meaning they will be set to the provided value.
# The other columns are outputs, which are evaluated after the inputs have been set, and then compared against the given expected values.
# The value &apos;x&apos; denotes a &apos;do not care&apos; value. Please click the &apos;Help&apos; button in this dialog for more information regarding test cases.
0     0x8000012f 0      1  0  x           0          x
1     0x8000012f 0      x  x  x           x          x
0     0          0      0  0  x           x          x
1     0          0      0  0  x           x          1024

# Fetch next instruction, check if the program counter increased by 4...
0     0          0      1  0  x           4          x</dataString>
          </testData>
        </entry>
      </elementAttributes>
      <pos x="-1680" y="1900"/>
    </visualElement>
    <visualElement>
      <elementName>Testcase</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>arith2 sub</string>
        </entry>
        <entry>
          <string>Testdata</string>
          <testData>
            <dataString>Clock Databus_in Halted RE WE Databus_out Addressbus R3
# The first line of test data must be the header, which contains the inputs and outputs used in the test case.
# It is possible to use registers in test cases by enabling their &apos;use as measurement value&apos; attribute in the advanced tab.
# The R0-R15 registers have this attribute enabled in the provided template.

# These init statements are used to set the register contents when the simulation is started.
# Note that all init statements are collected and executed first. Interleaving them with regular test data has no effect.
# If you wish to test other instructions, or with different values, you must add a new test case component to the circuit.
# If you do not do this, the tests will run sequentially, meaning the next test will use the CPU state obtained after executing the prior test.
# This is reflected below in the last test data row that checks if the program counter increased by 4.
init R1=4;
init R2=15;

# SUB 32, R2, R3
# Machine code: 0x7020 023f
# The four test data lines below describe the testing of the ADD R1, R2, R3 instruction.
# We first load the machine code into the Databus_in, and then drive the clock to step through the full instruction cycle once.
# Note that the first two columns (in this case) are inputs, meaning they will be set to the provided value.
# The other columns are outputs, which are evaluated after the inputs have been set, and then compared against the given expected values.
# The value &apos;x&apos; denotes a &apos;do not care&apos; value. Please click the &apos;Help&apos; button in this dialog for more information regarding test cases.
0     0x7020023f 0      1  0  x           0          x
1     0x7020023f 0      x  x  x           x          x
0     0          0      0  0  x           x          x
1     0          0      0  0  x           x          (32-15)

# Fetch next instruction, check if the program counter increased by 4...
0     0          0      1  0  x           4          x</dataString>
          </testData>
        </entry>
      </elementAttributes>
      <pos x="-1680" y="1980"/>
    </visualElement>
    <visualElement>
      <elementName>And</elementName>
      <elementAttributes/>
      <pos x="120" y="2020"/>
    </visualElement>
    <visualElement>
      <elementName>Not</elementName>
      <elementAttributes/>
      <pos x="60" y="2020"/>
    </visualElement>
    <visualElement>
      <elementName>Or</elementName>
      <elementAttributes>
        <entry>
          <string>Inputs</string>
          <int>4</int>
        </entry>
      </elementAttributes>
      <pos x="520" y="1620"/>
    </visualElement>
    <visualElement>
      <elementName>Testcase</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>arith2 sub testfails</string>
        </entry>
        <entry>
          <string>Testdata</string>
          <testData>
            <dataString>Clock Databus_in Halted RE WE Databus_out Addressbus R3
# The first line of test data must be the header, which contains the inputs and outputs used in the test case.
# It is possible to use registers in test cases by enabling their &apos;use as measurement value&apos; attribute in the advanced tab.
# The R0-R15 registers have this attribute enabled in the provided template.

# These init statements are used to set the register contents when the simulation is started.
# Note that all init statements are collected and executed first. Interleaving them with regular test data has no effect.
# If you wish to test other instructions, or with different values, you must add a new test case component to the circuit.
# If you do not do this, the tests will run sequentially, meaning the next test will use the CPU state obtained after executing the prior test.
# This is reflected below in the last test data row that checks if the program counter increased by 4.
init R1=4;
init R2=15;
init R3=0;

# SUB.F 32, R2, R3
# Machine code: 0x7020 023f
# The four test data lines below describe the testing of the ADD R1, R2, R3 instruction.
# We first load the machine code into the Databus_in, and then drive the clock to step through the full instruction cycle once.
# Note that the first two columns (in this case) are inputs, meaning they will be set to the provided value.
# The other columns are outputs, which are evaluated after the inputs have been set, and then compared against the given expected values.
# The value &apos;x&apos; denotes a &apos;do not care&apos; value. Please click the &apos;Help&apos; button in this dialog for more information regarding test cases.
0     0x7020023e 0      1  0  x           0          0
1     0x7020023e 0      x  x  x           x          0
0     0x7020023e 0      1  0  x           4          0
1     0x7020023e 0      x  x  x           x          0

# Fetch next instruction, check if the program counter increased by 4...
0     0          0      1  0  x           8          x</dataString>
          </testData>
        </entry>
      </elementAttributes>
      <pos x="-1680" y="2060"/>
    </visualElement>
  </visualElements>
  <wires>
    <wire>
      <p1 x="640" y="1920"/>
      <p2 x="1200" y="1920"/>
    </wire>
    <wire>
      <p1 x="-820" y="1920"/>
      <p2 x="60" y="1920"/>
    </wire>
    <wire>
      <p1 x="1100" y="1600"/>
      <p2 x="1220" y="1600"/>
    </wire>
    <wire>
      <p1 x="-1560" y="1600"/>
      <p2 x="-300" y="1600"/>
    </wire>
    <wire>
      <p1 x="20" y="2240"/>
      <p2 x="1140" y="2240"/>
    </wire>
    <wire>
      <p1 x="-760" y="1540"/>
      <p2 x="0" y="1540"/>
    </wire>
    <wire>
      <p1 x="640" y="1540"/>
      <p2 x="860" y="1540"/>
    </wire>
    <wire>
      <p1 x="1100" y="1540"/>
      <p2 x="1140" y="1540"/>
    </wire>
    <wire>
      <p1 x="-1040" y="1860"/>
      <p2 x="1220" y="1860"/>
    </wire>
    <wire>
      <p1 x="-760" y="1480"/>
      <p2 x="-180" y="1480"/>
    </wire>
    <wire>
      <p1 x="-180" y="1480"/>
      <p2 x="-160" y="1480"/>
    </wire>
    <wire>
      <p1 x="-600" y="2120"/>
      <p2 x="300" y="2120"/>
    </wire>
    <wire>
      <p1 x="-760" y="1420"/>
      <p2 x="-360" y="1420"/>
    </wire>
    <wire>
      <p1 x="280" y="2060"/>
      <p2 x="300" y="2060"/>
    </wire>
    <wire>
      <p1 x="540" y="2060"/>
      <p2 x="640" y="2060"/>
    </wire>
    <wire>
      <p1 x="-120" y="2060"/>
      <p2 x="120" y="2060"/>
    </wire>
    <wire>
      <p1 x="1200" y="1740"/>
      <p2 x="1300" y="1740"/>
    </wire>
    <wire>
      <p1 x="1540" y="1740"/>
      <p2 x="1580" y="1740"/>
    </wire>
    <wire>
      <p1 x="1260" y="1680"/>
      <p2 x="1300" y="1680"/>
    </wire>
    <wire>
      <p1 x="1540" y="1680"/>
      <p2 x="1580" y="1680"/>
    </wire>
    <wire>
      <p1 x="600" y="1680"/>
      <p2 x="680" y="1680"/>
    </wire>
    <wire>
      <p1 x="-120" y="1680"/>
      <p2 x="520" y="1680"/>
    </wire>
    <wire>
      <p1 x="-760" y="1360"/>
      <p2 x="-540" y="1360"/>
    </wire>
    <wire>
      <p1 x="-1780" y="1360"/>
      <p2 x="-1000" y="1360"/>
    </wire>
    <wire>
      <p1 x="-360" y="2000"/>
      <p2 x="180" y="2000"/>
    </wire>
    <wire>
      <p1 x="-760" y="1300"/>
      <p2 x="-720" y="1300"/>
    </wire>
    <wire>
      <p1 x="-1140" y="1300"/>
      <p2 x="-1000" y="1300"/>
    </wire>
    <wire>
      <p1 x="-1300" y="1300"/>
      <p2 x="-1280" y="1300"/>
    </wire>
    <wire>
      <p1 x="-1780" y="1300"/>
      <p2 x="-1540" y="1300"/>
    </wire>
    <wire>
      <p1 x="20" y="1940"/>
      <p2 x="40" y="1940"/>
    </wire>
    <wire>
      <p1 x="-1040" y="1940"/>
      <p2 x="-920" y="1940"/>
    </wire>
    <wire>
      <p1 x="1100" y="1620"/>
      <p2 x="1200" y="1620"/>
    </wire>
    <wire>
      <p1 x="-240" y="1620"/>
      <p2 x="520" y="1620"/>
    </wire>
    <wire>
      <p1 x="-1580" y="2260"/>
      <p2 x="1860" y="2260"/>
    </wire>
    <wire>
      <p1 x="700" y="1560"/>
      <p2 x="860" y="1560"/>
    </wire>
    <wire>
      <p1 x="1100" y="1560"/>
      <p2 x="1260" y="1560"/>
    </wire>
    <wire>
      <p1 x="-920" y="1880"/>
      <p2 x="-180" y="1880"/>
    </wire>
    <wire>
      <p1 x="1140" y="1880"/>
      <p2 x="1200" y="1880"/>
    </wire>
    <wire>
      <p1 x="-480" y="1820"/>
      <p2 x="1560" y="1820"/>
    </wire>
    <wire>
      <p1 x="-760" y="1500"/>
      <p2 x="-120" y="1500"/>
    </wire>
    <wire>
      <p1 x="-1780" y="2140"/>
      <p2 x="300" y="2140"/>
    </wire>
    <wire>
      <p1 x="-760" y="1440"/>
      <p2 x="-300" y="1440"/>
    </wire>
    <wire>
      <p1 x="-720" y="2080"/>
      <p2 x="300" y="2080"/>
    </wire>
    <wire>
      <p1 x="540" y="2080"/>
      <p2 x="680" y="2080"/>
    </wire>
    <wire>
      <p1 x="680" y="2080"/>
      <p2 x="700" y="2080"/>
    </wire>
    <wire>
      <p1 x="-420" y="1760"/>
      <p2 x="1300" y="1760"/>
    </wire>
    <wire>
      <p1 x="1560" y="1760"/>
      <p2 x="1580" y="1760"/>
    </wire>
    <wire>
      <p1 x="1240" y="1700"/>
      <p2 x="1300" y="1700"/>
    </wire>
    <wire>
      <p1 x="1540" y="1700"/>
      <p2 x="1580" y="1700"/>
    </wire>
    <wire>
      <p1 x="-60" y="1700"/>
      <p2 x="520" y="1700"/>
    </wire>
    <wire>
      <p1 x="-760" y="1380"/>
      <p2 x="-480" y="1380"/>
    </wire>
    <wire>
      <p1 x="100" y="2020"/>
      <p2 x="120" y="2020"/>
    </wire>
    <wire>
      <p1 x="-180" y="2020"/>
      <p2 x="60" y="2020"/>
    </wire>
    <wire>
      <p1 x="-760" y="1320"/>
      <p2 x="-660" y="1320"/>
    </wire>
    <wire>
      <p1 x="-1300" y="1320"/>
      <p2 x="-1040" y="1320"/>
    </wire>
    <wire>
      <p1 x="-1580" y="1320"/>
      <p2 x="-1540" y="1320"/>
    </wire>
    <wire>
      <p1 x="-1040" y="1320"/>
      <p2 x="-1000" y="1320"/>
    </wire>
    <wire>
      <p1 x="80" y="1960"/>
      <p2 x="180" y="1960"/>
    </wire>
    <wire>
      <p1 x="-180" y="1640"/>
      <p2 x="520" y="1640"/>
    </wire>
    <wire>
      <p1 x="-540" y="1580"/>
      <p2 x="860" y="1580"/>
    </wire>
    <wire>
      <p1 x="1100" y="1580"/>
      <p2 x="1240" y="1580"/>
    </wire>
    <wire>
      <p1 x="-920" y="1900"/>
      <p2 x="-900" y="1900"/>
    </wire>
    <wire>
      <p1 x="1240" y="1900"/>
      <p2 x="1260" y="1900"/>
    </wire>
    <wire>
      <p1 x="-760" y="1520"/>
      <p2 x="-60" y="1520"/>
    </wire>
    <wire>
      <p1 x="-1800" y="2160"/>
      <p2 x="-1780" y="2160"/>
    </wire>
    <wire>
      <p1 x="-1160" y="2160"/>
      <p2 x="-1140" y="2160"/>
    </wire>
    <wire>
      <p1 x="-760" y="1460"/>
      <p2 x="-240" y="1460"/>
    </wire>
    <wire>
      <p1 x="-240" y="1460"/>
      <p2 x="-220" y="1460"/>
    </wire>
    <wire>
      <p1 x="-660" y="2100"/>
      <p2 x="300" y="2100"/>
    </wire>
    <wire>
      <p1 x="-1780" y="1780"/>
      <p2 x="1300" y="1780"/>
    </wire>
    <wire>
      <p1 x="-360" y="1720"/>
      <p2 x="720" y="1720"/>
    </wire>
    <wire>
      <p1 x="1220" y="1720"/>
      <p2 x="1300" y="1720"/>
    </wire>
    <wire>
      <p1 x="1540" y="1720"/>
      <p2 x="1580" y="1720"/>
    </wire>
    <wire>
      <p1 x="1820" y="1720"/>
      <p2 x="1860" y="1720"/>
    </wire>
    <wire>
      <p1 x="-760" y="1400"/>
      <p2 x="-420" y="1400"/>
    </wire>
    <wire>
      <p1 x="180" y="2040"/>
      <p2 x="200" y="2040"/>
    </wire>
    <wire>
      <p1 x="-760" y="1340"/>
      <p2 x="-600" y="1340"/>
    </wire>
    <wire>
      <p1 x="-1300" y="1340"/>
      <p2 x="-1000" y="1340"/>
    </wire>
    <wire>
      <p1 x="-1560" y="1340"/>
      <p2 x="-1540" y="1340"/>
    </wire>
    <wire>
      <p1 x="220" y="1980"/>
      <p2 x="280" y="1980"/>
    </wire>
    <wire>
      <p1 x="-1140" y="1980"/>
      <p2 x="40" y="1980"/>
    </wire>
    <wire>
      <p1 x="580" y="1660"/>
      <p2 x="600" y="1660"/>
    </wire>
    <wire>
      <p1 x="0" y="1540"/>
      <p2 x="0" y="2160"/>
    </wire>
    <wire>
      <p1 x="640" y="1540"/>
      <p2 x="640" y="1920"/>
    </wire>
    <wire>
      <p1 x="640" y="1920"/>
      <p2 x="640" y="2060"/>
    </wire>
    <wire>
      <p1 x="1220" y="1600"/>
      <p2 x="1220" y="1720"/>
    </wire>
    <wire>
      <p1 x="1220" y="1860"/>
      <p2 x="1220" y="1880"/>
    </wire>
    <wire>
      <p1 x="1860" y="1720"/>
      <p2 x="1860" y="2260"/>
    </wire>
    <wire>
      <p1 x="200" y="2000"/>
      <p2 x="200" y="2040"/>
    </wire>
    <wire>
      <p1 x="-1040" y="1320"/>
      <p2 x="-1040" y="1860"/>
    </wire>
    <wire>
      <p1 x="-1040" y="1940"/>
      <p2 x="-1040" y="2160"/>
    </wire>
    <wire>
      <p1 x="-1040" y="1860"/>
      <p2 x="-1040" y="1940"/>
    </wire>
    <wire>
      <p1 x="-720" y="1300"/>
      <p2 x="-720" y="2080"/>
    </wire>
    <wire>
      <p1 x="-720" y="2080"/>
      <p2 x="-720" y="2160"/>
    </wire>
    <wire>
      <p1 x="720" y="1700"/>
      <p2 x="720" y="1720"/>
    </wire>
    <wire>
      <p1 x="-660" y="1320"/>
      <p2 x="-660" y="2100"/>
    </wire>
    <wire>
      <p1 x="-660" y="2100"/>
      <p2 x="-660" y="2160"/>
    </wire>
    <wire>
      <p1 x="20" y="1940"/>
      <p2 x="20" y="2240"/>
    </wire>
    <wire>
      <p1 x="-1560" y="1340"/>
      <p2 x="-1560" y="1600"/>
    </wire>
    <wire>
      <p1 x="-600" y="1340"/>
      <p2 x="-600" y="2120"/>
    </wire>
    <wire>
      <p1 x="-600" y="2120"/>
      <p2 x="-600" y="2160"/>
    </wire>
    <wire>
      <p1 x="-920" y="1880"/>
      <p2 x="-920" y="1900"/>
    </wire>
    <wire>
      <p1 x="1560" y="1760"/>
      <p2 x="1560" y="1820"/>
    </wire>
    <wire>
      <p1 x="1240" y="1580"/>
      <p2 x="1240" y="1700"/>
    </wire>
    <wire>
      <p1 x="280" y="1980"/>
      <p2 x="280" y="2060"/>
    </wire>
    <wire>
      <p1 x="600" y="1660"/>
      <p2 x="600" y="1680"/>
    </wire>
    <wire>
      <p1 x="-540" y="1360"/>
      <p2 x="-540" y="1580"/>
    </wire>
    <wire>
      <p1 x="-540" y="1580"/>
      <p2 x="-540" y="2160"/>
    </wire>
    <wire>
      <p1 x="-480" y="1380"/>
      <p2 x="-480" y="1820"/>
    </wire>
    <wire>
      <p1 x="-480" y="1820"/>
      <p2 x="-480" y="2160"/>
    </wire>
    <wire>
      <p1 x="-420" y="1400"/>
      <p2 x="-420" y="1760"/>
    </wire>
    <wire>
      <p1 x="-420" y="1760"/>
      <p2 x="-420" y="2160"/>
    </wire>
    <wire>
      <p1 x="-360" y="1420"/>
      <p2 x="-360" y="1720"/>
    </wire>
    <wire>
      <p1 x="-360" y="2000"/>
      <p2 x="-360" y="2160"/>
    </wire>
    <wire>
      <p1 x="-360" y="1720"/>
      <p2 x="-360" y="2000"/>
    </wire>
    <wire>
      <p1 x="680" y="1700"/>
      <p2 x="680" y="2080"/>
    </wire>
    <wire>
      <p1 x="-1580" y="1320"/>
      <p2 x="-1580" y="2260"/>
    </wire>
    <wire>
      <p1 x="-300" y="1440"/>
      <p2 x="-300" y="1600"/>
    </wire>
    <wire>
      <p1 x="-300" y="1600"/>
      <p2 x="-300" y="2160"/>
    </wire>
    <wire>
      <p1 x="1260" y="1560"/>
      <p2 x="1260" y="1680"/>
    </wire>
    <wire>
      <p1 x="-240" y="1460"/>
      <p2 x="-240" y="1620"/>
    </wire>
    <wire>
      <p1 x="-240" y="1620"/>
      <p2 x="-240" y="2160"/>
    </wire>
    <wire>
      <p1 x="1200" y="1620"/>
      <p2 x="1200" y="1740"/>
    </wire>
    <wire>
      <p1 x="-180" y="1480"/>
      <p2 x="-180" y="1640"/>
    </wire>
    <wire>
      <p1 x="-180" y="1640"/>
      <p2 x="-180" y="1880"/>
    </wire>
    <wire>
      <p1 x="-180" y="1880"/>
      <p2 x="-180" y="2020"/>
    </wire>
    <wire>
      <p1 x="-180" y="2020"/>
      <p2 x="-180" y="2160"/>
    </wire>
    <wire>
      <p1 x="-1140" y="1300"/>
      <p2 x="-1140" y="1980"/>
    </wire>
    <wire>
      <p1 x="-1140" y="1980"/>
      <p2 x="-1140" y="2160"/>
    </wire>
    <wire>
      <p1 x="-1780" y="1300"/>
      <p2 x="-1780" y="1360"/>
    </wire>
    <wire>
      <p1 x="-1780" y="2140"/>
      <p2 x="-1780" y="2160"/>
    </wire>
    <wire>
      <p1 x="-1780" y="1360"/>
      <p2 x="-1780" y="1780"/>
    </wire>
    <wire>
      <p1 x="-1780" y="1780"/>
      <p2 x="-1780" y="2140"/>
    </wire>
    <wire>
      <p1 x="1140" y="1540"/>
      <p2 x="1140" y="1880"/>
    </wire>
    <wire>
      <p1 x="1140" y="1880"/>
      <p2 x="1140" y="2240"/>
    </wire>
    <wire>
      <p1 x="-120" y="1500"/>
      <p2 x="-120" y="1680"/>
    </wire>
    <wire>
      <p1 x="-120" y="2060"/>
      <p2 x="-120" y="2160"/>
    </wire>
    <wire>
      <p1 x="-120" y="1680"/>
      <p2 x="-120" y="2060"/>
    </wire>
    <wire>
      <p1 x="-60" y="1520"/>
      <p2 x="-60" y="1700"/>
    </wire>
    <wire>
      <p1 x="-60" y="1700"/>
      <p2 x="-60" y="2160"/>
    </wire>
    <wire>
      <p1 x="700" y="1560"/>
      <p2 x="700" y="1660"/>
    </wire>
    <wire>
      <p1 x="60" y="1920"/>
      <p2 x="60" y="1940"/>
    </wire>
  </wires>
  <measurementOrdering/>
</circuit>